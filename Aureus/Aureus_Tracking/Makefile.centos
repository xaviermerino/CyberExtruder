.SUFFIXES:
#==============================================================

TARGET=centos
#TARGET=linux
	
#==============================================================
OBJDIR=./$(TARGET)
LIBDIR=../lib$(TARGET)
vpath %.cpp ./
vpath %.c ./
vpath %.h ./
.PHONY : objdir
objdir :
	@mkdir -p $(OBJDIR)
.PHONY : libdir
libdir :
	@mkdir -p $(LIBDIR)
.PHONY : folders
folders : objdir libdir
#============= C++ compiler ===================================
CC = g++
#==============================================================


#=========== objects to make the test program =================
OBJS = cxutils.o Aureus_Tracking.o
#==============================================================
objects = $(addprefix $(OBJDIR)/, $(OBJS) )
#==============================================================

#================ some base folders etc =======================
# change these to suit your system
BASE = ..


#================= includes & compiler options ================
# include path to Aureus FR SDK
AUREUS_INC = -I$(BASE)/Aureus
# local include path
AUREUS_TRACKING_INC = -I$(BASE)/Aureus_Tracking
# include path to jpeg code
JPEG = -I$(BASE)/jpeg
# all includes
INC = $(AUREUS_INC) $(AUREUS_TRACKING_INC) $(JPEG) -pthread
# includes plus C++ compiler flags
CPPFLAGS = $(INC) -DNDEBUG -DBOOST_DISABLE_ASSERTS -std=gnu++17 -O3
#==============================================================



# we tell the linker to look in output and local folders
# this also ensures the executable can find the SDK
LDFLAGS = -L$(LIBDIR) -L. "-Wl,-rpath,./"

# libAureus.so is the Aureus Video processing and FR SDK
# we need the jpeg library as we load jpeg images in the
# example code

LDLIBS = -lAureus -lz -ljpeg -ltbb -lresolv

# we make the target in the same folder as the SDK
code: $(objects)
	$(CC) $(CPPFLAGS) $(LDFLAGS) -o $(LIBDIR)/Aureus_Tracking_exe $(objects) $(LDLIBS)


.KEEPSTATE:
ifeq ($(TARGET),)
all:
	@echo "variable TARGET not defined!"
	@echo "use the following syntax to build:"
	@echo "make all TARGET=buildname"
	@echo "where buildname is the target OS/Hardware, e.g.:"
	@echo "make all TARGET=linux"
	@echo "or:"
	@echo "make all TARGET=arm"
	@echo "etc."
else
all : folders code
endif


$(OBJDIR)/%.o : %.cpp
	$(CC) -c $(CPPFLAGS) $< -o $@

$(OBJDIR)/%.o : %.c
	$(CC) -c $(CPPFLAGS) $< -o $@

.PHONY : clean
clean :
	rm $(objects)

